@page "/"
@using PolicyInitiativeEditor.Shared
@inject HttpClient Http

<PageTitle>Policy Initiative Bicep Builder</PageTitle>

<h1>Policy Initiative Bicep Builder</h1>

@if (policies == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <RadzenDataGrid Data="@policies" TItem="PolicyDto" AllowColumnResize=true AllowSorting=true 
        AllowMultiColumnSorting=true AllowFiltering=true AllowGrouping=true AllowAlternatingRows=true
        SelectionMode="DataGridSelectionMode.Multiple" AllowPaging=true PageSize="25"
        @bind-Value=@selectedPolicies>
        <Columns>
            <RadzenDataGridColumn TItem="PolicyDto" Property="Category" Title="Category" SortOrder="SortOrder.Ascending" Width="175px" />
            <RadzenDataGridColumn TItem="PolicyDto" Property="Type" Title="Type" Width="125px" />
            <RadzenDataGridColumn TItem="PolicyDto" Property="Name" Title="Name" SortOrder="SortOrder.Ascending" />
            <RadzenDataGridColumn TItem="PolicyDto" Property="Description" Title="Description" Groupable=false Sortable=false />
        </Columns>
    </RadzenDataGrid>
}

@code {
    private IEnumerable<PolicyDto>? policies;
    private IList<PolicyDto>? selectedPolicies;

    protected override async Task OnInitializedAsync()
    {
        policies = await Http.GetFromJsonAsync<IEnumerable<PolicyDto>>("policy");
    }

    //void OnRender(DataGridRenderEventArgs<PolicyDto> args)
    //{
    //    if (args.FirstRender)
    //    {
    //        args.Grid.Groups.Add(new GroupDescriptor() { Property = "Category" });
    //        StateHasChanged();
    //    }
    //}
}
